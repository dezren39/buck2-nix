#! /usr/bin/env bash
# SPDX-FileCopyrightText: Â© 2022 Austin Seipp
# SPDX-License-Identifier: MIT OR Apache-2.0

set -e
set -o pipefail

# NOTE: you should occasionally do this from a shell:
#
#     $ nix run nixpkgs#shellcheck -- ./buck/nix/update.sh

FLAKE=0
TOOLCHAINS=0
CACHE=0

usage() {
  echo "Usage: $0 [--flake|--toolchains|--cache|--all]"
  exit 2
}

PARSED_ARGUMENTS=$(getopt -an update.sh -o ftca --long flake,toolchains,cache,all -- "$@")
VALID_ARGUMENTS=$?
[ "$VALID_ARGUMENTS" != "0" ] && usage

eval set -- "$PARSED_ARGUMENTS"
while : ; do
  case "$1" in
    -f | --flake)      FLAKE=1      ; shift ;;
    -t | --toolchains) TOOLCHAINS=1 ; shift ;;
    -c | --cache)      CACHE=1      ; shift ;;
    -a | --all)        FLAKE=1; TOOLCHAINS=1; CACHE=1; shift ;;

    --) shift; break ;;
    *) echo "Unexpected option: $1 - this should not happen." && usage ;;
  esac
done

[ "$FLAKE" = "0" ] && [ "$TOOLCHAINS" = "0" ] && [ "$CACHE" = "0" ] && usage
echo "Updating flake: $FLAKE, toolchains: $TOOLCHAINS, cache: $CACHE"

if [ "$FLAKE" = "1" ]; then
  root=$(sl root)
  nix flake update "${root}/buck/nix"
fi

if [ "$TOOLCHAINS" = "1" ]; then
  root=$(sl root)
  nix build --print-out-paths "${root}/buck/nix#world"

  set -x
  jq -r '.toolchainPackages | to_entries[] | [ .key, .value ] | join(" ")' ./result \
    | while read -r name out; do
        p=$(nix path-info --derivation "${root}/buck/nix#toolchains/${name}");
        echo "{ \"${name}\": { \"drv\": \"${p}\", \"out\": \"${out}\" } }"
      done \
    | jq -n 'reduce inputs as $in (null; . + $in)' \
    | (cat <<EOF
# SPDX-License-Identifier: MIT OR Apache-2.0

# NOTE: DO NOT EDIT MANUALLY!
# NOTE: This file is @generated by the following command:
#
#    \$(sl root)/buck/nix/update.sh toolchains
#
# NOTE: Please run the above command to regenerate this file.

nix_toolchains = $(cat /dev/stdin)
EOF
      ) > "${root}/buck/nix/toolchains.bzl"

  jq -r '.toolchainPackages | to_entries[] | .key' ./result \
    | while read -r n; do echo "nix_toolchain(visibility = [\"PUBLIC\"], name = \"${n}\")"; done \
    | (cat <<EOF
# SPDX-License-Identifier: MIT OR Apache-2.0

# NOTE: DO NOT EDIT MANUALLY!
# NOTE: This file is @generated by the following command:
#
#    \$(sl root)/buck/nix/update.sh toolchains
#
# NOTE: Please run the above command to regenerate this file.

load("@prelude//:nix.bzl", "nix_toolchain")
load("@prelude//:bash.bzl", "run_bash")

run_bash(name = "update", src = "update.sh")

$(cat /dev/stdin)
EOF
      ) > "${root}/buck/nix/TARGETS"
  rm ./result*
fi

if [ "$CACHE" = "1" ]; then
  MANUAL_REBUILD_AND_PUSH=1 "$(sl root)/buck/nix/cache-upload.sh"
fi
